{
  "name": "browser-serialport",
  "version": "2.0.3",
  "description": "Robots in the browser. Just like node-serialport but for browser/chrome apps.",
  "main": "index.js",
  "browser": "./index.js",
  "dependencies": {},
  "devDependencies": {
    "chai": "^1.10.0",
    "jshint": "^2.5.11",
    "lodash": "^3.6.0",
    "mocha": "^2.1.0",
    "sinon": "^1.12.2",
    "sinon-chai": "^2.6.0"
  },
  "scripts": {
    "test": "jshint index.js && mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/garrows/browser-serialport"
  },
  "keywords": [
    "serial",
    "firmata",
    "nodebots",
    "chromebots",
    "browserbots",
    "robot",
    "robots"
  ],
  "author": {
    "name": "Glen Arrowsmith @garrows"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/garrows/browser-serialport/issues"
  },
  "readme": "# browser-serialport\n\nRobots in the browser. Just like [node-serialport](https://npmjs.org/package/serialport) but for browser apps.\n\n\n## Why not Node.js?\n\n[Nodebots](http://nodebots.io/) are awesome but HTML5 apps have access to a lot of APIs that make sense for robotics like the [GamepadAPI](http://www.html5rocks.com/en/tutorials/doodles/gamepad/), [WebRTC Video and Data](http://www.webrtc.org/), [Web Speech API](http://www.google.com/intl/en/chrome/demos/speech.html), etc. Also you get a nice GUI and its easier to run. I have also made a fork of [Johnny-Five](https://github.com/garrows/johnny-five) to work with [Browserify](http://browserify.org/) as well by modifying it's dependancy [Firmata](https://github.com/garrows/firmata) to use browser-serialport.\n\n## Restrictions\n\nYou will not be able to add this to your normal website.\n\nThis library only works in a [Chrome Packaged App](http://developer.chrome.com/apps/about_apps.html) as this is the only way to get access to the [serial ports API](http://developer.chrome.com/apps/serial.html) in the browser.\n\nIf you want help making your first Chrome App, read the [\"Create Your First App\"](http://developer.chrome.com/apps/first_app.html) tutorial.\n\nThere is currently no Firefox extension support but that might come soon if possible.\n\n\nKnown incompatibilities with node-serialport\n-------------------------------------------\n* Parsers not implemented\n* Inconsistent error messages\n* Chrome has a slightly different options set:\n    * __dataBits__: 7, 8\n    * __stopBits__: 1, 2\n    * __parity__: 'none', 'even', 'mark', 'odd', 'space'\n    * __flowControl__: 'RTSCTS'\n\n\n## Installation\n\n```\nnpm install browser-serialport\n```\n\nTo Use\n------\n\nOpening a serial port:\n\n```js\nvar SerialPort = require(\"browser-serialport\").SerialPort\nvar serialPort = new SerialPort(\"/dev/tty-usbserial1\", {\n  baudrate: 57600\n});\n```\n\nWhen opening a serial port, you can specify (in this order).\n\n1. Path to Serial Port - required.\n1. Options - optional and described below.\n\nThe options object allows you to pass named options to the serial port during initialization. The valid attributes for the options object are the following:\n\n* baudrate: Baud Rate, defaults to 9600. Should be one of: 115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, or 50. Custom rates as allowed by hardware is supported.\n* databits: Data Bits, defaults to 8. Must be one of: 8, 7, ~~6~~, or ~~5~~.\n* stopbits: Stop Bits, defaults to 1. Must be one of: 1 or 2.\n* parity: Parity, defaults to 'none'. Must be one of: 'none', 'even', 'mark', 'odd', 'space'\n* buffersize: Size of read buffer, defaults to 255. Must be an integer value.\n* parser: The parser engine to use with read data, defaults to rawPacket strategy which just emits the raw buffer as a \"data\" event. Can be any function that accepts EventEmitter as first parameter and the raw buffer as the second parameter.\n\n**Note, we have added support for either all lowercase OR camelcase of the options (thanks @jagautier), use whichever style you prefer.**\n\nopen event\n----------\n\nYou MUST wait for the open event to be emitted before reading/writing to the serial port. The open happens asynchronously so installing 'data' listeners and writing\nbefore the open event might result in... nothing at all.\n\nAssuming you are connected to a serial console, you would for example:\n\n```js\nserialPort.on(\"open\", function () {\n  console.log('open');\n  serialPort.on('data', function(data) {\n    console.log('data received: ' + data);\n  });\n  serialPort.write(\"ls\\n\", function(err, results) {\n    console.log('err ' + err);\n    console.log('results ' + results);\n  });\n});\n```\n\nYou can also call the open function, in this case instanciate the serialport with an additional flag.\n\n```js\nvar SerialPort = require(\"browser-serialport\").SerialPort\nvar serialPort = new SerialPort(\"/dev/tty-usbserial1\", {\n  baudrate: 57600\n}, false); // this is the openImmediately flag [default is true]\n\nserialPort.open(function (error) {\n  if ( error ) {\n    console.log('failed to open: '+error);\n  } else {\n    console.log('open');\n    serialPort.on('data', function(data) {\n      console.log('data received: ' + data);\n    });\n    serialPort.write(\"ls\\n\", function(err, results) {\n      console.log('err ' + err);\n      console.log('results ' + results);\n    });\n  }\n});\n```\n\nList Ports\n----------\n\nYou can also list the ports along with some metadata as well.\n\n```js\nvar serialPort = require(\"browser-serialport\");\nserialPort.list(function (err, ports) {\n  ports.forEach(function(port) {\n    console.log(port.comName);\n    console.log(port.pnpId);\n    console.log(port.manufacturer);\n  });\n});\n```\n\nParsers\n-------\n\nBrowser-serialport doesn't as of 2.0.0 support parsers.\n\n\nYou can get updates of new data from the Serial Port as follows:\n\n```js\nserialPort.on(\"data\", function (data) {\n  sys.puts(\"here: \"+data);\n});\n```\n\nYou can write to the serial port by sending a string or buffer to the write method as follows:\n\n```js\nserialPort.write(\"OMG IT WORKS\\r\");\n```\n\nEnjoy and do cool things with this code.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/garrows/browser-serialport",
  "_id": "browser-serialport@2.0.3",
  "_from": "browser-serialport@*"
}
