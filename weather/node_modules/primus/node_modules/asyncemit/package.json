{
  "name": "asyncemit",
  "version": "3.0.1",
  "description": "Asynchronously emit event an event based on the arguments length.",
  "main": "index.js",
  "scripts": {
    "100%": "istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
    "test": "mocha test.js",
    "watch": "mocha --watch test.js",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/primus/asyncemit"
  },
  "keywords": [
    "async",
    "emit",
    "event",
    "emitter",
    "eventemitter",
    "asyncemit"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/primus/asyncemit/issues"
  },
  "homepage": "https://github.com/primus/asyncemit",
  "devDependencies": {
    "assume": "1.2.x",
    "eventemitter3": "1.1.x",
    "istanbul": "0.3.x",
    "mocha": "2.2.x",
    "pre-commit": "1.0.x"
  },
  "peerDependencies": {
    "eventemitter3": ">=1.1.0"
  },
  "readme": "# asyncemit\n\n[![Version npm](http://img.shields.io/npm/v/asyncemit.svg?style=flat-square)](http://browsenpm.org/package/asyncemit)[![Build Status](http://img.shields.io/travis/primus/asyncemit/master.svg?style=flat-square)](https://travis-ci.org/primus/asyncemit)[![Dependencies](https://img.shields.io/david/primus/asyncemit.svg?style=flat-square)](https://david-dm.org/primus/asyncemit)[![Coverage Status](http://img.shields.io/coveralls/primus/asyncemit/master.svg?style=flat-square)](https://coveralls.io/r/primus/asyncemit?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23primus-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=primus)\n\nThe `asyncemit` allows you to emit an event to an EventEmitter3 asynchronously.\n\n## Installation\n\nThe module is released in the public npm registry and can be installed using:\n\n```\nnpm install --save asyncemit\n```\n\n## Usage\n\nTo make this pattern work there are a couple of preconditions that need to be\nsatisfied:\n\n1. The method should be added on either a class that inherits from the\n   EventEmitter or on a new EventEmitter instance.\n2. The number of arguments expected by a listener function should match the\n   number of arguments passed to the `asyncemit` method excluding the event\n   name.\n\nSee the following example:\n\n```js\nvar EventEmitter = require('eventemitter3')\n  , asyncemit = require('asyncemit');\n\nvar ee = new EventEmitter();\nee.asyncemit = asyncemit;\n\n//\n// The next `foo` listeners will not be executed until `next` is called.\n//\nee.on('foo', function (arg, next) {\n  // Do things with arg?\n  next();\n});\n\n//\n// Still executed, but synchronously.\n//\nee.on('foo', function (arg) {\n\n});\n\nee.asyncemit('foo', 'bar', function (err) {\n  //\n  // The error argument will be set if one of the async listeners called the\n  // `next` callback with an `error` argument.\n  //\n});\n```\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "asyncemit@3.0.1",
  "_from": "asyncemit@3.0.x"
}
