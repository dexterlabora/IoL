{
  "name": "demolish",
  "version": "1.0.2",
  "description": "Generate a destruction method which clean's up and destroys all references on the instance",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec --ui bdd test.js",
    "watch": "mocha --watch --reporter spec --ui bdd test.js",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- --reporter spec --ui bdd test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- --reporter spec --ui bdd test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/unshiftio/demolish"
  },
  "keywords": [
    "destroy",
    "destruct",
    "destroyer",
    "destruction",
    "demolish"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/unshiftio/demolish/issues"
  },
  "devDependencies": {
    "assume": "0.0.x",
    "istanbul": "0.3.x",
    "mocha": "2.1.x",
    "pre-commit": "0.0.x"
  },
  "homepage": "https://github.com/unshiftio/demolish",
  "readme": "# demolish\n\n[![Made by unshift][made-by]](http://unshift.io)[![Version npm][version]](http://browsenpm.org/package/demolish)[![Build Status][build]](https://travis-ci.org/unshiftio/demolish)[![Dependencies][david]](https://david-dm.org/unshiftio/demolish)[![Coverage Status][cover]](https://coveralls.io/r/unshiftio/demolish?branch=master)[![IRC channel][irc]](http://webchat.freenode.net/?channels=unshift)\n\n[made-by]: https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square\n[version]: https://img.shields.io/npm/v/demolish.svg?style=flat-square\n[build]: https://img.shields.io/travis/unshiftio/demolish/master.svg?style=flat-square\n[david]: https://img.shields.io/david/unshiftio/demolish.svg?style=flat-square\n[cover]: https://img.shields.io/coveralls/unshiftio/demolish/master.svg?style=flat-square\n[irc]: https://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square\n\nDemolish is a small module which helps you clean, release and destroy your\ncreated instances.\n\n## Install\n\nThis module is intended for Node.js and Browserify usage and can be installed\nusing:\n\n```\nnpm install --save demolish\n```\n\n## Usage\n\nThe module is exported as a function and be required as following:\n\n```js\n'use strict';\n\nvar demolish = require('demolish');\n```\n\nThe `demolish` function returns a function which will destroy the specified\nproperties from your instance.\n\n```js\nfunction Foo() {\n  this.bar = 1;\n  this.banana = new Banana();\n}\n\nFoo.prototype.destroy = demolish('bar banana');\n```\n\nIn the example above we've created a new `destroy` method on our `Foo` class.\nOnce the method is called it will set the `bar` property to `null` and check if\n`banana` also has a `destroy` method, if so, it will call that method and set\nthe property to `null` after the execution.\n\nAfter everything is cleaned up we will emit a `destroy` event if there is an\n`emit` method available.\n\nThe `destroy` method will automatically prevent double execution by checking if\nthe first supplied property is still active on the prototype. So in the example\nabove it will check if `bar` is not `null`.\n\nBut nulling objects and destroying things you've set on an instance might not be\nenough. Sometimes you need a bit more and for those cases we have the additional\n`before` and `after` hooks. These hooks can be specified in the options:\n\n```js\nFoo.prototype.destroy = demolish('bar banana', {\n  before: 'clear',\n  after: ['removeAllListeners', function () {\n    // things\n  }]\n});\n```\n\nIn the example above you see all the supported styles. If you supply a string\nwe assume that it's a function on the prototype that needs to be executed in order\nto clean up things correctly. If you need to run multiple tasks you can supply\nan array with strings. In addition to strings we also support functions, these\nfunctions will be called with their `this` value set to the instance of the class\nwhere `destroy` works.\n\nSo in the example above the execution flow is the following:\n\n1. Check if `destroy` has already been called, if not, continue to step 2.\n2. Execute the before hook.\n3. Iterate over all properties that need to be destroyed and nulled.\n4. Emit the `destroy` event, where possible.\n5. Execute the after hook.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "demolish@1.0.2",
  "_from": "demolish@1.0.x"
}
