{
  "name": "tick-tock",
  "version": "1.0.0",
  "description": "Timer management, never forget to clear timers again",
  "main": "index.js",
  "scripts": {
    "100%": "istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
    "test": "mocha test.js",
    "watch": "mocha --watch test.js",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/unshiftio/tick-tock"
  },
  "keywords": [
    "timer",
    "setTimeout",
    "clearTimeout",
    "setInterval",
    "clearInterval",
    "setImmediate",
    "clearImmediate",
    "tick",
    "tock",
    "nextTick",
    "time"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "devDependencies": {
    "assume": "1.2.x",
    "istanbul": "0.3.x",
    "mocha": "2.2.x",
    "pre-commit": "1.1.x"
  },
  "dependencies": {
    "millisecond": "0.1.x"
  },
  "pre-commit": [
    "coverage",
    "100%"
  ],
  "readme": "# tick-tock\n\n[![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](http://img.shields.io/npm/v/tick-tock.svg?style=flat-square)](http://browsenpm.org/package/tick-tock)[![Build Status](http://img.shields.io/travis/unshiftio/tick-tock/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/tick-tock)[![Dependencies](https://img.shields.io/david/unshiftio/tick-tock.svg?style=flat-square)](https://david-dm.org/unshiftio/tick-tock)[![Coverage Status](http://img.shields.io/coveralls/unshiftio/tick-tock/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/tick-tock?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=unshift)\n\n`tick-tock` is a small timer and `setTimeout` management library. Nothing to\nfancy, but fancy enough to make your code more readable.\n\n## Installation\n\nThis library can be used with both browserify and node.js and can be installed\nusing npm:\n\n```\nnpm install --save tick-tock\n```\n\n## Usage\n\nIn all example we assume that you've required and initialized the library using:\n\n```js\n'use strict';\n\nvar Tick = require('tick-tock')\n  , tock = new Tick();\n```\n\nAll methods return `this` unless stated otherwise. The constructor can be\ninitialized with 1 argument:\n\n1. `context` This is the default context in which each `setTimeout` or\n   `setInterval` function is executed (it sets the `this` value). If nothing is\n   supplied it will default to your `tick-tock` instance.\n\nThe following methods are available on your constructed instance:\n\n- [Tock.setTimeout(name, fn, timeout)](#tocksettimeout)\n- [Tock.setInterval(name, fn, interval)](#tocksetinterval)\n- [Tock.clear(name, name, ..)](#tockclear)\n- [Tock.active(name)](#tockactive)\n- [Tock.adjust(name, duration)](#tockadjust)\n- [Tock.end()](#tockend)\n\n### Tock.setTimeout()\n\nThe `setTimeout` method adds as you might have expected.. a new setTimeout. The\ntimeouts are stored based on the name that your provide them. If you've already\nstored a timer with the given name, it will add the supplied callback to the\nsame stack so only one timer is used and they all run at the same time. Normally\nyou would supply the `setTimeout` method with a number indicating long it should\ntimeout. In this library we also support human readable strings.\n\n```js\ntock.setTimeout('foo', function () {}, 10);\n\n// Ran at the same point in time as the timeout above\nsetTimeout(function () {\n  tock.setTimeout('foo', function () {}, 10); \n}, 5);\n\ntock.setTimeout('another', function () {}, '10 minutes');\n```\n\n### Tock.setInterval()\n\nExactly the same method and functionality as above but instead of only being\ncalled once, it will called at an interval.\n\n### Tock.clear()\n\nThe `clear` method allows you to clear every stored timeout by name. You can\nsupply it multiple arguments (strings) to clear all given timers and if you\nsupply 1 strings it can be comma separated list of names. If no arguments are\nsupplied it will clear all timers in this instance.\n\n```js\ntock.clear('foo', 'bar');\ntock.clear('foo, bar'); // Same as above.\ntock.clear(); // Nuke everything.\n```\n\n### Tock.active()\n\nCheck if there's an active timer for the given name and returns a boolean.\n\n```js\ntock.active('foo'); // true;\ntock.clear();\ntock.active('foo'); // false;\n```\n\n### Tock.adjust()\n\nThere are cases where you sometimes need to update or change the interval of an\n`setTimeout` or `setInterval` for example in the case of a setTimeout which\ncoordinates a heartbeat. In order to make this easier you call the `.adjust`\nmethod with the name of the timeout that you want to adjust and the new\ninterval/timeout.\n\n```js\ntock.setTimeout('heartbeat timeout', function () {});\n\n// you recieved a new heartbeat so you want to reset or adjust the heartbeat;\ntock.adjust('heartbeat timeout', '1 second');\n```\n\n### Tock.end()\n\nYou no longer wish to interact with your instance and wants it to be fully shut\ndown. This kills all active timers using `tock.clear()` and nulls the internal\nproperties. It will return `true` if it's the first time it's destroyed and\n`false` if was already destroyed before. If you call any of the other methods\nafter destruction, they will throw errors.\n\n```js\ntock.end();\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/unshiftio/tick-tock/issues"
  },
  "homepage": "https://github.com/unshiftio/tick-tock",
  "_id": "tick-tock@1.0.0",
  "_from": "tick-tock@1.0.x"
}
