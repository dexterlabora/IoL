{
  "name": "url-parse",
  "version": "1.0.5",
  "description": "Small footprint URL parser that works seamlessly across Node.js and browser environments",
  "main": "index.js",
  "scripts": {
    "100%": "istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
    "browserify": "mkdir -p dist && browserify index.js -s URLParse -o dist/url-parse.js",
    "test-node": "istanbul cover _mocha --report lcovonly -- test.js",
    "coverage": "istanbul cover _mocha -- test.js",
    "test-browser": "zuul -- test.js",
    "watch": "mocha --watch test.js",
    "test": "mocha test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/unshiftio/url-parse.git"
  },
  "keywords": [
    "URL",
    "parser",
    "uri",
    "url",
    "parse",
    "query",
    "string",
    "querystring",
    "stringify"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "dependencies": {
    "querystringify": "0.0.x",
    "requires-port": "1.0.x"
  },
  "devDependencies": {
    "assume": "1.3.x",
    "browserify": "12.0.x",
    "istanbul": "0.4.x",
    "mocha": "2.3.x",
    "pre-commit": "1.1.x",
    "zuul": "3.7.x"
  },
  "readme": "# url-parse\n[![Made by unshift](https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square)](http://unshift.io)[![Version npm](https://img.shields.io/npm/v/url-parse.svg?style=flat-square)](http://browsenpm.org/package/url-parse)[![Build Status](https://img.shields.io/travis/unshiftio/url-parse/master.svg?style=flat-square)](https://travis-ci.org/unshiftio/url-parse)[![Dependencies](https://img.shields.io/david/unshiftio/url-parse.svg?style=flat-square)](https://david-dm.org/unshiftio/url-parse)[![Coverage Status](https://img.shields.io/coveralls/unshiftio/url-parse/master.svg?style=flat-square)](https://coveralls.io/r/unshiftio/url-parse?branch=master)[![IRC channel](https://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square)](https://webchat.freenode.net/?channels=unshift)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/url-parse.svg)](https://saucelabs.com/u/url-parse)\n\nThe `url-parse` method exposes two different API interfaces. The\n[`url`](https://nodejs.org/api/url.html) interface that you know from Node.js\nand the new [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL)\ninterface that is available in the latest browsers.\n\nSince `0.1` we've moved away from using the DOM's `<a>` element for URL parsing\nand moving to a full Regular Expression solution. The main reason for this\nchange is to make the URL parser available in different JavaScript environments\nas you don't always have access to the DOM like `Worker` environments. This\nmodule still have a really small foot print as this module's main intention is\nto be bundled with client-side code. The only problem however with a RegExp\nbased solution is that it required a lot of lookups causing major problems in\nFireFox. So the last and the current solution was a pure string parsing\nsolution which chops up the URL in smaller pieces.\n\nIn addition to URL parsing we also expose the bundled `querystringify` module.\n\n## Installation\n\nThis module is designed to be used using either browserify or node.js it's\nreleased in the public npm registry and can be installed using:\n\n```\nnpm install url-parse\n```\n\n## Usage\n\nAll examples assume that this library is bootstrapped using:\n\n```js\n'use strict';\n\nvar URL = require('url-parse');\n```\n\nTo parse an URL simply call the `URL` method with the URL that needs to be\ntransformed in to an object.\n\n```js\nvar url = new URL('https://github.com/foo/bar');\n```\n\nThe `new` keyword is optional but it will save you an extra function invocation.\nIn the example above we've demonstrated the URL interface, but as said in the\nmodule description we also support the node.js interface. So you could also use\nthe library in this way:\n\n```js\n'use strict';\n\nvar parse = require('url-parse')\n  , url = parse('https://github.com/foo/bar', true);\n```\n\nThe returned `url` instance contains the following properties:\n\n- `protocol`: Requested protocol without slashes (e.g. `http:`).\n- `username`: Username of basic authentication.\n- `password`: Password of basic authentication.\n- `auth`: Authentication information portion (e.g. `username:password`).\n- `host`: Host name with port number.\n- `hostname`: Host name without port number.\n- `port`: Optional port number.\n- `pathname`: URL path.\n- `query`: Parsed object containing query string, unless parsing is set to false.\n- `hash`: The \"fragment\" portion of the URL including the pound-sign (`#`).\n- `href`: The full URL.\n\n### URL.set(key, value)\n\nA simple helper function to change parts of the URL and propagating it through\nall properties. When you set a new `host` you want the same value to be applied\nto `port` if has a different port number, `hostname` so it has a correct name\nagain and `href` so you have a complete URL.\n\n```js\nvar parsed = parse('http://google.com/parse-things');\n\nparsed.set('hostname', 'yahoo.com');\nconsole.log(parsed.href); // http://yahoo.com/parse-things\n```\n\nIt's aware of default ports so you cannot set a port 80 on an URL which has\n`http` as protocol.\n\n### URL.toString()\n\nThe returned `url` object comes with a custom `toString` method which will\ngenerate a full URL again when called. The method accepts an extra function\nwhich will stringify the query string for you. If you don't supply a function we\nwill use our default method.\n\n```js\nvar location = url.toString(); // http://example.com/whatever/?qs=32\n```\n\nYou would rarely need to use this method as the full URL is also available as\n`href` property. If you are using the `URL.set` method to make changes, this\nwill automatically update.\n\n## Testing\n\nThe testing of this module is done in 3 different ways:\n\n1. We have unit tests setup which run under Node.js using the normal `npm test`\n   command.\n2. Code coverage can be run manually using `npm run coverage`\n3. For browser testing we use `testling` to startup a test server. We do assume\n   that you `testling` installed globally, if not please run `npm install -g\n   testling` and after that `testling -u` in the root of this repository. When\n   you visit the outputted URL all unit tests that were written from the Node\n   can now be ran inside browsers.\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/unshiftio/url-parse/issues"
  },
  "homepage": "https://github.com/unshiftio/url-parse",
  "_id": "url-parse@1.0.5",
  "_from": "url-parse@1.0.x"
}
