{
  "name": "mingo",
  "version": "0.6.1",
  "description": "JavaScript implementation of MongoDB query language",
  "main": "mingo.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "tape test/*.js",
    "build": "uglifyjs mingo.js -c -m -o mingo.min.js --source-map mingo.min.map"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kofrasa/mingo.git"
  },
  "files": [
    "mingo.js",
    "mingo.min.js",
    "README.md",
    "LICENSE"
  ],
  "dependencies": {
    "underscore": ">=1.5.2"
  },
  "devDependencies": {
    "underscore": ">=1.5.2",
    "backbone": ">=1.1.2",
    "tape": ">=2.14.0",
    "JSON": ">=1.0.0",
    "uglify-js": "2.4.x",
    "gulp": ">=3.8.11",
    "gulp-cli": ">=0.2.0",
    "gulp-uglify": ">=1.1.0",
    "gulp-rename": ">=1.2.0",
    "gulp-plumber": ">=1.0.0"
  },
  "keywords": [
    "util",
    "mongo",
    "mongodb",
    "nosql",
    "query",
    "browser",
    "querying",
    "functional",
    "aggregation",
    "filtering",
    "grouping",
    "searching"
  ],
  "author": {
    "name": "Francis Asante",
    "email": "kofrasa@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kofrasa/mingo/issues"
  },
  "readme": "# Mingo\nJavaScript implementation of MongoDB query language\n\nMingo harnesses the power of MongoDB-style queries and allows direct querying of in-memory \njavascript objects in both client and server-side environments.\n\n[![build status](https://secure.travis-ci.org/kofrasa/mingo.png)](http://travis-ci.org/kofrasa/mingo)\n\n## Dependencies\n[underscore](https://github.com/jashkenas/underscore)\n\n## Installing\n```$ npm install mingo```\n\nIn browser\n```html\n<!-- DO NOT FORGET Underscore -->\n<script type=\"text/javascript\" src=\"./underscore-min.js\"></script>\n<script type=\"text/javascript\" src=\"./mingo.min.js\"></script>\n```\n\n## Features\n- Supports Dot Notation for both '_&lt;array&gt;.&lt;index&gt;_' and '_&lt;document&gt;.&lt;field&gt;_' selectors\n- Query and Projection Operators\n    - Array Operators (`$all`, `$elemMatch`, `$size`)\n    - Comparisons Operators (`$gt`, `$gte`, `$lt`, `$lte`, `$ne`, `$nin`, `$in`)\n    - Element Operators (`$exists`, `$type`)\n    - Evaluation Operators (`$regex`, `$mod`, `$where`)\n    - Logical Operators (`$and`, `$or`, `$nor`, `$not`)\n- Aggregation Framework Operators\n    - Pipeline Operators (`$group`, `$match`, `$project`, `$sort`, `$limit`, `$unwind`, `$skip`)\n    - Group Operators (`$addToSet`, `$sum`, `$max`, `$min`, `$avg`, `$push`, `$first`, `$last`)\n    - Projection Operators (`$elemMatch`, `$slice`)\n    - Arithmetic Operators (`$add`, `$divide`, `$mod`, `$multiply`, `$subtract`)\n    - Array Operators (`$size`)\n    - Boolean Operators (`$and`, `$or`, `$not`)\n    - Comparisons Operators (`$cmp`, `$gt`, `$gte`, `$lt`, `$lte`, `$ne`, `$nin`, `$in`)\n    - Conditional Operators (`$cond`, `$ifNull`)\n    - Date Operators (`$dayOfYear`, `$dayOfMonth`, `$dayOfWeek`, `$year`, `$month`, `$week`, `$hour`, `$minute`, `$second`, `$millisecond`, `$dateToString`)\n    - Literal Operators (`$literal`)\n    - Set Operators (`$setEquals`, `$setIntersection`, `$setDifference`, `$setUnion`, `$setIsSubset`, `$anyElementTrue`, `$allElementsTrue`)\n    - String Operators (`$strcasecmp`, `$concat`, `$substr`, `$toLower`, `$toUpper`)\n    - Variable Operators (`$map`, `$let`)\n- Support for custom operators\n- BackboneJS Integration\n- JSON stream filtering and projection. *NodeJS only*\n\nFor documentation on using query operators see [mongodb](http://docs.mongodb.org/manual/reference/operator/query/)\n\n\n## Usage\n```js\n\nvar Mingo = require('mingo');\n// or just access *Mingo* global in browser\n\n// setup the key field for your collection\nMingo.setup({\n    key: '_id' // default\n});\n\n// create a query with criteria\n// find all grades for homework with score >= 50\nvar query = new Mingo.Query({\n    type: \"homework\",\n    score: { $gte: 50 }\n});\n```\n\n## Searching and Filtering\n```js\n// filter collection with find()\nvar cursor = query.find(collection);\n\n// shorthand with query criteria\n// cursor = Mingo.find(collection, criteria);\n\n// sort, skip and limit by chaining\ncursor.sort({student_id: 1, score: -1})\n    .skip(100)\n    .limit(100);\n\n// count matches\ncursor.count();\n\n// iterate cursor\n// iteration is forward only\nwhile (cursor.hasNext()) {\n    console.log(cursor.next());\n}\n\n// use first(), last() and all() to retrieve matched objects\ncursor.first();\ncursor.last();\ncursor.all();\n\n// Filter non-matched objects (\nvar result = query.remove(collection);\n```\n\n## Aggregation Pipeline\n```js\nvar agg = new Mingo.Aggregator([\n    {'$match': { \"type\": \"homework\"}},\n    {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\n    {'$sort':{'_id': 1, 'score': 1}}\n]);\n\nvar result = agg.run(collection);\n\n// shorthand\nresult = Mingo.aggregate(\n    collection,\n    [\n        {'$match': { \"type\": \"homework\"}},\n        {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\n        {'$sort':{'_id': 1, 'score': 1}}\n    ]\n);\n```\n\n## Stream Filtering\n```js\nvar JSONStream = require('JSONStream'),\n    fs = require('fs'),\n    Mingo = require('mingo');\n\nvar query = new Mingo.Query({\n  scores: { $elemMatch: {type: \"exam\", score: {$gt: 90}} }\n}, {name: 1});\n\nfile = fs.createReadStream('./students.json');\n\nvar qs = query.stream();\nqs.on('data', function (data) {\n    console.log(data); // log filtered outputs\n    // ex. { name: 'Dinah Sauve', _id: 49 }\n});\n\nfile.pipe(JSONStream.parse(\"*\")).pipe(qs);\n```\n\n## Backbone Integration\n```js\n// using with Backbone\nvar Grades = Backbone.Collection.extend(Mingo.CollectionMixin);\n\nvar grades = new Grades(collection);\n\n// find students with grades less than 50 in homework or quiz\n// sort by score ascending and type descending\ncursor = grades.query({\n    $or: [{type: \"quiz\", score: {$lt: 50}}, {type: \"homework\", score: {$lt: 50}}]\n}).sort({score: 1, type: -1}).limit(10);\n\n// print grade with the lowest score\ncursor.first();\n```\n\n## Documentation\n- [API](https://github.com/kofrasa/mingo/wiki/API)\n- [Custom Operators](https://github.com/kofrasa/mingo/wiki/Custom-Operators)\n\n## TODO\n - Geospatial Query Operators (`$geoWithin`, `$geoIntersects`, `$near`, `$nearSphere`)\n - Geometry Specifiers (`$geometry`, `$maxDistance`, `$center`, `$centerSphere`, `$box`, `$polygon`)\n\n## License\nMIT",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kofrasa/mingo",
  "_id": "mingo@0.6.1",
  "_from": "mingo@^0.6.0"
}
