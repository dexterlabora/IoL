{
  "name": "temporal",
  "description": "Non-blocking, temporal task sequencing and scheduling.",
  "version": "0.4.1",
  "homepage": "https://github.com/rwaldron/temporal",
  "author": {
    "name": "Rick Waldron",
    "email": "waldron.rick@gmail.com"
  },
  "contributors": [
    {
      "name": "Matthieu Dehaussy",
      "email": "<mdehaussy@carlipa.com"
    },
    {
      "name": "Taha Hesham",
      "email": "<taha@wizylabs.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/rwaldron/temporal.git"
  },
  "bugs": {
    "url": "https://github.com/rwaldron/temporal/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rwaldron/temporal/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/temporal",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "es6-shim": "latest"
  },
  "devDependencies": {
    "grunt": "0.4.1",
    "grunt-contrib-jshint": "latest",
    "grunt-contrib-nodeunit": "latest",
    "grunt-contrib-watch": "latest",
    "grunt-jsbeautifier": "latest"
  },
  "keywords": [
    "schedule",
    "task",
    "settimeout",
    "setinterval",
    "nexttick",
    "process",
    "sequence",
    "sequencing",
    "loop",
    "repeat",
    "wait",
    "delay",
    "sleep"
  ],
  "readme": "# temporal\n\n\n[![Build Status](https://travis-ci.org/rwaldron/temporal.png?branch=master)](https://travis-ci.org/rwaldron/temporal)\n\nNon-blocking, temporal task sequencing. `temporal` does NOT use `setTimeout` or `setInterval`, however there is a cost for using \"recursive\" `setImmediate` to create an extremely fast, async execution loop. CPU usage is expected to peak when using `temporal`, because the internal ticker needs to execute as fast as possible and as many times per second as possible. It's this speed that allows `temporal` to review the internal schedule for tasks to execute more than once per millisecond, which is needed to create preferential execution cycles for hardware programming. \n\n`temporal` is for writing timing sensitive programs that are expected to be the primary process running on a given system, where the power source itself is tuned to accommodate _that program_ specifically. Concrete examples include: \n\n- walking robots (autonomous and remote control bipeds, quadrupeds or hexapods)\n- driving robots (autonomous and remote control rovers)\n- flying robots (autonomous and remote control single and multi-rotor helicopter)\n- water based robots (underwater rovs, surface boat-likes)\n\n`temporal` is not good for sparse task scheduling. \n\n\n## Presentations\n\n- [EmpireJS](https://dl.dropboxusercontent.com/u/3531958/empirejs/index.html)\n- [CascadiaJS](https://dl.dropboxusercontent.com/u/3531958/cascadiajs/index.html)\n\n\n\n\n## Getting Started\n\n```bash\nnpm install temporal\n```\n\n\n## Examples\n\n```javascript\nvar temporal = require(\"temporal\");\n\ntemporal.on(\"idle\", function() {\n  console.log(\"Temporal is idle\");  \n});\n\n// Wait 500 milliseconds, execute a task\ntemporal.delay(500, function() {\n\n  console.log(\"500ms later...\");\n\n});\n\n// Loop every n milliseconds, executing a task each time\ntemporal.loop(500, function() {\n\n  console.log(\"Every 500ms...\");\n\n  // |this| is a reference to the temporal instance\n  // use it to cancel the loop by calling:\n  //\n  this.stop();\n\n  // The number of times this loop has been executed:\n  this.called; // number\n\n  // The first argument to the callback is the same as |this|\n});\n\n\n// Queue a sequence of tasks: delay, delay\n// Each delay time is added to the prior delay times.\ntemporal.queue([\n  {\n    delay: 500,\n    task: function() {\n      // Executes 500ms after temporal.queue(...) is called\n    }\n  },\n  {\n    delay: 500,\n    task: function() {\n      // Executes 1000ms after temporal.queue(...) is called\n\n      // The last \"delay\" task will emit an \"ended\" event\n    }\n  }\n]);\n\n// Queue a sequence of tasks: delay then loop\n// Each delay time is added to the prior delay times.\ntemporal.queue([\n  {\n    delay: 500,\n    task: function() {\n      // Executes 500ms after temporal.queue(...) is called\n    }\n  },\n  {\n    loop: 100,\n    task: function() {\n      // Executes 600ms after temporal.queue(...) is called\n\n      // Executes every 100ms thereafter.\n    }\n  }\n]);\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/gruntjs/grunt).\n\n\n## License\nSee LICENSE file.\n\n",
  "readmeFilename": "README.md",
  "_id": "temporal@0.4.1",
  "_from": "temporal@"
}
